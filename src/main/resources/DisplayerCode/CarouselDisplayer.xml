<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>DisplayerCode</web>
  <name>CarouselDisplayer</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.SpaceIndex</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1388530800000</creationDate>
  <date>1388530800000</date>
  <contentUpdateDate>1388530800000</contentUpdateDate>
  <version>1.1</version>
  <title>CarouselDisplayer</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <attachment>
    <filename>sprite-2.png</filename>
    <filesize>532</filesize>
    <author>XWiki.kebir</author>
    <date>1422880765000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAADAAAAAJCAYAAAB0d6/iAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAALEgAACxIB0t1+/AAAAB50RVh0U29mdHdhcmUAQWRvYmUgRmlyZXdvcmtzIENTNS4xqx9I6wAA
ABV0RVh0Q3JlYXRpb24gVGltZQAzLzA1LzE0AS89vQAAAWtJREFUOI29k7FKA0EURY8rBAQhICMs
WAUyjVUqbTSKQcFG0TIwtb2Cf+AHCDZWikMKsU2lJGAaISAKQRFGTCUsONgKW9mMEDe7yayFp7z3
zZt7izfBAEKqLeDLGn2DB9VWFAJrwDTQ7dTCx1HzQqoCsA7MAe9A2xr95fOXkKoOvFqju4N6kAh/
BRQ8w9eBN6ABnAIP1VbUqLaiyYwAZeAFaLr5JvDkdB+KwLWQamGowB/Cl4EzYCph1YH9jGdXQCmh
lZzuy1CJIG/4gaBZ8yopCKnmgUrGfMX5vvwqEQAXI8JkMTPCC1O02TH7xvlJikBDSFUIgG3A65AG
uB/hdVO0HhBnzMfOz8MHsGuNjgNr9C2wSb4SlxmfxsBRUrRGfwLHGbtOnO/LB7Bqje6BO2JXYgPP
Ep1aGAPLwDnw83kbWOzUwru0N9boQ2AP6DupD+xZow9yhI9c+OdUV0i1JKRaybHw3xBS7aQd+zc6
tXEfZJKdtgAAAABJRU5ErkJggg==
</content>
  </attachment>
  <object>
    <class>
      <name>DisplayerCode.DisplayerSheetClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <providedType>
        <customDisplay/>
        <disabled>0</disabled>
        <name>providedType</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>providedType</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </providedType>
    </class>
    <name>DisplayerCode.CarouselDisplayer</name>
    <number>0</number>
    <className>DisplayerCode.DisplayerSheetClass</className>
    <guid>69d91681-9ec0-4fbf-9eaf-4ea1c7fe08a2</guid>
    <property>
      <providedType>Carousel</providedType>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>DisplayerCode.CarouselDisplayer</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>326d69a1-5a54-4fff-9bbe-f8c5f7c80739</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
var widgets = XWiki.widgets = XWiki.widgets || {};
widgets.Carousel = Class.create({
  defaultOptions : {
    // How long does the sliding animation take
    duration : 0.5,
    // How long to display a slide before automatically switching to the next one
    frequency : 6
  },

  initialize : function(container, options) {
    this.scrolling  = false;
    this.container  = $(container);
    this.scroller   = this.container.down('.scroller');
    this.sections   = this.container.select('.section');
    this.controls   = this.container.select('.controls a');
    var l=this.controls.length;
    this.nextButton=this.controls.findAll(function(item){return item.hasClassName('nextImage');})[0];
    this.previousButton=this.controls.findAll(function(item){return item.hasClassName('previousImage');})[0];
    this.options    = Object.extend(Object.clone(this.defaultOptions), options || {});

    this.sections.each(function(section, index) {
      section._index = index;
      section._control = this.container.down('.controls a.item[href="#' + section.id + '"]');
    }.bind(this));

    this.addObservers();
    if (this.options.initialSection) {
      // initialSection should be the id of the section you want to show up on load
      this.moveTo(this.options.initialSection);
    }
    if(this.options.autoGlide || this.container.hasClassName('autostart')) {
      this.start();
    }
  },

  addObservers: function() {
    this.controls.invoke('observe', 'click', this.click.bindAsEventListener(this));
  },

  click: function(event) {
    event.stop();
    this.stop();
    var element = event.findElement('a');
    if (this.scrolling) {
      this.scrolling.cancel();
    }

    this.moveTo(this.container.down('#'+element.href.split("#")[1]));
    this.timer=this.periodicallyUpdate.bind(this).delay(this.options.frequency)
  },

  moveTo: function(element) {
    this.current = $(element);

    var number = this.current._index;
    var next=(this.sections.length-1==number)?0:number+1;
    var previous=(number==0)?this.sections.length-1:number-1;
    this.nextButton.href="#section"+next;
    this.previousButton.href="#section"+previous;

    Position.prepare();
    var containerOffset = Position.cumulativeOffset(this.scroller),
    elementOffset = Position.cumulativeOffset($(element));

    this.scrolling = new Effect.SmoothScroll(this.scroller, {duration:this.options.duration, x:(elementOffset[0]-containerOffset[0]), y:(elementOffset[1]-containerOffset[1]), afterFinish: this.onAnimationEnded.bind(this)});
  },

  next: function() {
    if (this.current) {
      var currentIndex = this.current._index;
      var nextIndex = (this.sections.length - 1 == currentIndex) ? 0 : currentIndex + 1;
    } else {
      var nextIndex = 1;
    }

    this.moveTo(this.sections[nextIndex]);
  },

  previous: function() {
    if (this.current) {
      var currentIndex = this.current._index;
      var prevIndex = (currentIndex == 0) ? this.sections.length - 1 : currentIndex - 1;
    } else {
      var prevIndex = this.sections.length - 1;
    }

    this.moveTo(this.sections[prevIndex]);
  },

  stop: function() {
    clearTimeout(this.timer);
  },

  start: function() {
    this.periodicallyUpdate();
  },

  periodicallyUpdate: function() {
    if (this.timer != null) {
      clearTimeout(this.timer);
      this.next();
    }
    this.timer = this.periodicallyUpdate.bind(this).delay(this.options.frequency);
  },

  onAnimationEnded : function() {
    this.scrolling = false;
    var currentControl = this.current._control;
    this.controls.each(function(control) {
      if (control == currentControl) {
        control.addClassName("on")
      } else {
        control.removeClassName("on")
      }
    });
  }
});

Effect.SmoothScroll = Class.create(Effect.Base, {
  initialize: function(element, options) {
    this.element = $(element);
    var options = Object.extend({
      x: 0,
      y: 0,
      mode: 'absolute'
    } , options || {});
    this.start(options);
  },
  setup: function() {
    if (this.options.continuous &amp;&amp; !this.element._ext ) {
      this.element.cleanWhitespace();
      this.element._ext=true;
      this.element.appendChild(this.element.firstChild);
    }

    this.originalLeft=this.element.scrollLeft;
    this.originalTop=this.element.scrollTop;

    if(this.options.mode == 'absolute') {
      this.options.x -= this.originalLeft;
      this.options.y -= this.originalTop;
    }
  },
  update: function(position) {
    this.element.scrollLeft = this.options.x * position + this.originalLeft;
    this.element.scrollTop  = this.options.y * position + this.originalTop;
  }
});

function init() {
  $$('.carousel').each(function(carousel) {
    new widgets.Carousel(carousel);
  });
}

// When the document is loaded, start the carousels.
(XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

return XWiki;
}(XWiki || {}));</code>
    </property>
    <property>
      <name>Carousel</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>DisplayerCode.CarouselDisplayer</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>a8b6e10c-0d3a-44e0-87ad-79751d6f887a</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.carouseldisplayer .carouselcontainer .section, .carouseldisplayer .carouselcontainer .scroller {
  overflow: hidden;
}
.carouseldisplayer .carouselcontainer .section {
  display:inline-block;
  vertical-align: middle;
}
.carouseldisplayer .carouselcontainer img {
  padding: 0 !important;
        
}
.carouseldisplayer .carouselcontainer .content {
  /* We try to make the sections display one to the left of the other with this rule. We cannot fix vertical, because they might have different vertical sizes.  */
  width: 10000px;
}

.videoitem-date {
  display: block;
  padding: 5px 0 10px;
  font-size: 11px;
}
.videoitem-title {
  display: block;
  font-size: 16px;
}
/* Nav */

.carouseldisplayer .controls .carousel-indicators a {
 text-indent: 100%;
 white-space: nowrap;
 color: white;
 background-color: transparent;
 font-size: 0px;
}

.carousel-indicators {
  bottom: 10px;
  left: 47%;
  list-style: outside none none;
  margin-left: -3%;
  padding-left: 0;
  position: absolute;
  text-align: center;
  width: 70px;
  z-index: 15;
}
.simpleCarousel-control.right, .simpleCarousel-control.left{
  background: transparent;
}
.carousel.autostart{
  margin-left: -30px;
  margin-right: -30px;
}
div#slider-navigation a {
  background-color: rgba(0, 0, 0, 0);
  border: 1px solid #fff;
  border-radius: 10px;
  cursor: pointer;
  display: inline-block;
  height: 10px;
  margin: 1px;
  text-indent: -999px;
  width: 10px;
}

div#slider-navigation a.item.on {
  background-color: #fff;
  height: 12px;
  margin: 0;
  width: 12px;
}

div#slider-navigation a.nextImage {
  background-position: right 0;
}
div.carousel.autostart {
  position: relative;
}
  .carousel-inner &gt; .item &gt; img,
  .carousel-inner &gt; .item &gt; a &gt; img {
    width: 70%;
    margin: auto;
  }
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{velocity}}
#set($discard = $xwiki.ssx.use('DisplayerCode.CarouselDisplayer'))
#set($discard = $xwiki.jsx.use('DisplayerCode.CarouselDisplayer'))
#set($obj = $doc.getObject('TotemCode.TotemClass'))
#set($raw = $obj.getProperty('contentSize').value)
#if($raw != '')
  #set($contentSize = 0)
  #set($contentSize = $contentSize.parseInt($raw) + 30)
  #set($maxwidth=$contentSize + 'px')
#end
  #set($width='100%')

#set($sectionSize=100 + 'vw')
#set($height='100%')
{{html wiki='true'}}
&lt;div class="carouseldisplayer" style="max-width:${width};" &gt;
&lt;div class='carouselcontainer'&gt;
&lt;div class='carousel autostart'&gt;
&lt;div class="controls"&gt;
    #set($lastListItem = $mathtool.sub($blockDisplayerDocList.size(), 1))
    &lt;a class='left simpleCarousel-control carousel-control previousImage' href="#section${lastListItem}" title="$escapetool.xml($msg.get('totem.carousel.controls.previous'))"&gt;
      &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt;
      &lt;span class="sr-only"&gt;Previous&lt;/span&gt;
    &lt;/a&gt;
    &lt;div id="slider-navigation" class="carousel-indicators clearfix"&gt;
      #foreach($document in $blockDisplayerDocList)
        #set($sectionNumber = $mathtool.sub($velocityCount, 1))
        &lt;a class="item #if($sectionNumber == 0)on#end" href="#section${sectionNumber}" title="$escapetool.xml($msg.get('totem.carousel.controls.slide', [$velocityCount]))"&gt;$escapetool.xml($msg.get('totem.carousel.controls.slide', [$velocityCount]))&lt;/a&gt;
      #end
    &lt;/div&gt;
    &lt;a class="right simpleCarousel-control carousel-control nextImage" href="#section1" title="$escapetool.xml($msg.get('totem.carousel.controls.next'))"&gt;
      &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt;
      &lt;span class="sr-only"&gt;Next&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

  &lt;div class='scroller' style="width:${width};height:${height};max-width:${maxwidth};"&gt;
    &lt;div class='content'&gt;
    #foreach($document in $blockDisplayerDocList)
      #set($sectionNumber = $mathtool.sub($velocityCount, 1))    
      #set($image = $document.getValue('image'))
      #if($image!='')
        #set($attach = $services.model.resolveAttachment($image, "explicit", $document.getDocumentReference()))
        #set($image2 = $services.model.serialize($attach, "default"))
        &lt;div id="section${sectionNumber}" class='section' style="width:${sectionSize}; height:${height};max-width:${maxwidth};"&gt;
         #set($url = $document.display('url'))
         #if(!$url.startWith('http://') || !$url.startWith('https://'))
           #set($url = 'http://' +  $!url)   
         #end
          [[[[image:$image2||width="${width}"]]&gt;&gt;$document.display('url')]]
        ##  &lt;span class="videoitem-date"&gt;$document.display('date')&lt;/span&gt;
        ##  &lt;span class="videoitem-title"&gt;[[$document.title&gt;&gt;$!url]]&lt;/span&gt;
        &lt;/div&gt;
      #end
    #end
  &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;##carousel
&lt;/div&gt;##carouselcontainer
&lt;/div&gt;##videosdisplayer
{{/html}}

{{/velocity}}</content>
</xwikidoc>
